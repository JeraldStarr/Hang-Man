@startuml
actor Browser
participant Game
participant Password
participant Validator
participant Keyboard
participant Key
participant Cutting
participant HangMan

== Initialization ==
create Game
Browser -> Game: create()

create Password
Game -> Password: create()
Game -> Password: selectPassword()
Game <-- Password: password

create Validator
Game -> Validator: create(password)
Game <-- Validator

create Keyboard
Game -> Keyboard: create(validator)
loop for each figure in figures
    create Key
    Keyboard -> Key: create(figure, alphabet)
    Keyboard <-- Key
    alt "(index + 1) % 7 == 0"
        create Cutting
        Keyboard -> Cutting: create(alphabet)
        Keyboard <-- Cutting
    end
end
Keyboard -> Keyboard: setOnClickHandler(handler)
loop for each key in drawKeys
    Keyboard -> Key: setOnClickHandler(handler)
    Key -> Browser: onClink(Key::onClick)
    Key <-- Browser
    Keyboard <-- Key
end

Game <-- Keyboard

create HangMan
Game -> HangMan: create()

Game -> Game: subscribe()
ref over Game, Password,Validator, HangMan : Game::subscribe()

Game -> Game: draw()
ref over Game, Password, Keyboard, HangMan : Game::draw()

Browser <-- Game

== Game::subscribe() ==
Game -> Validator: subscribe(Action::Ok, Password::showFigure)
Game -> Validator: subscribe(Action::Nok, HangMan::drawNextImage)
Game <-- Validator

== Game::draw() ==
Game -> Password: drawHiddenPassword()
Game <-- Password
Game -> Keyboard: drawKeys()
Keyboard -> Browser: onClick(Keyboard::onClick(figure))
Keyboard <-- Browser
Game <-- Keyboard
Game -> HangMan: drawNextImage()
Game <-- HangMan

== Browser::onClick() ==
Browser -> Key: onClick()
Key->Validator: validateFigure(figure)
alt validation OK
    Validator -> Password: showFigure(figure)
    alt password guessed
        Password -> Browser: show(win)
    end
    Validator <-- Password
    Key <-- Validator: true
else validation NOK
    Validator -> HangMan: drawNextImage()
    alt game lost
        HangMan -> Browser: show(failed)
    end
    Validator <-- HangMan
    Key <-- Validator: false
end
note right Key: result = {true, false}
Key -> Key: markFigure(figure, result)
Browser <-- Key

@enduml
